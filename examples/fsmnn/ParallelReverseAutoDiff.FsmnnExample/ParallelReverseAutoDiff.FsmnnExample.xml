<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ParallelReverseAutoDiff.FsmnnExample</name>
    </assembly>
    <members>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.CubeSplitter">
            <summary>
            Provides a cube splitter.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.CubeSplitter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.CubeSplitter"/> class.
            </summary>
            <param name="maxDepth">The max depth.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.CubeSplitter.FindQuadrantIndices(ParallelReverseAutoDiff.FsmnnExample.Amaze.Point3d)">
            <summary>
            Finds the quadrant indices.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>The quadrant indices.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.CubeSplitter.FindQuadrantIndices(ParallelReverseAutoDiff.FsmnnExample.Amaze.Point3d,System.Int32)">
            <summary>
            Finds the quadrant indices.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="depth">The depth.</param>
            <returns>The quadrant indices.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze">
            <summary>
            Creates a maze.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.MazeNodes">
            <summary>
            Gets or sets the maze nodes.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.MazePath">
            <summary>
            Gets or sets the maze path.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.Size">
            <summary>
            Gets or sets the maze size.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.MaxDepth">
            <summary>
            Gets or sets the maximum depth.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.NumQuadrants">
            <summary>
            Gets or sets the number of quadrants.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.NodeCount">
            <summary>
            Gets the node count.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.NumIndices">
            <summary>
            Gets the number of indices.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.AlphabetSize">
            <summary>
            Gets the alphabet size.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.ToTrueLabel(System.Int32)">
            <summary>
            To the true label.
            </summary>
            <param name="size">The size.</param>
            <returns>The true label.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze.ToIndices">
            <summary>
            To indices.
            </summary>
            <returns>The indices.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType">
            <summary>
            The direction of the maze.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.Up">
            <summary>
            Up.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.Down">
            <summary>
            Down.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.Above">
            <summary>
            Above.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.Below">
            <summary>
            Below.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.LeftOrRight">
            <summary>
            Left or right.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.UpOrDown">
            <summary>
            Up or down.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeDirectionType.LeftOrRightOrUpOrDown">
            <summary>
            Left or right or up or down.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeMaker">
            <summary>
            Creates a maze.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeMaker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeMaker"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeMaker.CreateMaze(System.Int32)">
            <summary>
            Creates a maze.
            </summary>
            <param name="mazeSize">The maze size.</param>
            <returns>The maze.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeMaker.ChangePath(ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze)">
            <summary>
            Change the path.
            </summary>
            <param name="maze">The maze.</param>
            <returns>The changed maze.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeNode">
            <summary>
            A node in the maze.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeNode.AvailableDirections">
            <summary>
            Gets or sets the available directions.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeNode.PositionX">
            <summary>
            Gets or sets the position X.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeNode.PositionY">
            <summary>
            Gets or sets the position Y.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeNode.PositionZ">
            <summary>
            Gets or sets the position Z.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeNode.DeepClone">
            <summary>
            Gets a deep clone of the maze node.
            </summary>
            <returns>The maze node clone.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeNode.ToIndices(ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze)">
            <summary>
            Calculates the indices.
            </summary>
            <param name="maze">The maze.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazePath">
            <summary>
            Creates a maze path.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazePath.MazeNodes">
            <summary>
            Gets or sets the maze nodes.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeStore">
            <summary>
            A maze store.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeStore.#ctor(ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeStore"/> class.
            </summary>
            <param name="maze">The maze.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeStore.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeStore.DirectionTypes">
            <summary>
            Gets or sets the direction types.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.MazeStore.ToMaze">
            <summary>
            Converts to a maze.
            </summary>
            <returns>The maze.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.Point3d">
            <summary>
            Provides point data.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.Amaze.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.FsmnnExample.Amaze.Point3d"/> class.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="z">Z.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Point3d.X">
            <summary>
            Gets or sets X.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Point3d.Y">
            <summary>
            Gets or sets Y.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.Amaze.Point3d.Z">
            <summary>
            Gets or sets Z.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachineNeuralNetworkTrainer">
            <summary>
            A finite state machine neural network trainer.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachineNeuralNetworkTrainer.Train">
            <summary>
            Train the network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachineNeuralNetworkTrainer.RunIteration(ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork,System.Double)">
            <summary>
            Runs an iteration of training.
            </summary>
            <param name="traversalNetwork">The traversal network.</param>
            <param name="trueMaxMin">The true max min.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalCrossEntropyLossOperation">
            <summary>
            Categorical cross-entropy loss operation.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalCrossEntropyLossOperation.Forward(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Performs the forward operation.
            </summary>
            <param name="predicted">1xN matrix of predicted probabilities.</param>
            <param name="trueLabel">1xN matrix of true labels (one-hot encoded).</param>
            <returns>The computed loss.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalCrossEntropyLossOperation.Backward">
            <summary>
            Computes the gradient with respect to the predicted probabilities.
            </summary>
            <returns>1xN matrix of gradients.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryLossOperation">
            <summary>
            Categorical variance binary loss operation.
            Uses an algothim to determine the optimal threshold.
            Utilizes early stopping in the loss function and subsequent gradient calculation.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryLossOperation.Forward(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix,System.Double)">
            <summary>
            Performs the forward operation.
            </summary>
            <param name="predicted">1xN matrix of predicted probabilities.</param>
            <param name="targetMatrix">The target matrix of ones or zeroes.</param>
            <param name="trueVariance">1xN matrix of true labels (one-hot encoded).</param>
            <returns>The computed loss.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryLossOperation.Backward">
            <summary>
            Computes the gradient with respect to the predicted probabilities.
            </summary>
            <returns>1xN matrix of gradients.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryThresholdLossOperation">
            <summary>
            Categorical variance binary threshold loss operation.
            Uses an algothim to determine the optimal threshold.
            Utilizes early stopping in the loss function and subsequent gradient calculation.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryThresholdLossOperation.Forward(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix,System.Double)">
            <summary>
            Performs the forward operation.
            </summary>
            <param name="predicted">1xN matrix of predicted probabilities.</param>
            <param name="targetMatrix">The target matrix of ones or zeroes.</param>
            <param name="trueVariance">1xN matrix of true labels (one-hot encoded).</param>
            <returns>The computed loss.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryThresholdLossOperation.Backward">
            <summary>
            Computes the gradient with respect to the predicted probabilities.
            </summary>
            <returns>1xN matrix of gradients.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryThresholdSearchLossOperation">
            <summary>
            Categorical variance binary threshold loss operation.
            Uses an algothim to determine the optimal threshold.
            Utilizes early stopping in the loss function and subsequent gradient calculation.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryThresholdSearchLossOperation.Forward(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix,System.Double)">
            <summary>
            Performs the forward operation.
            </summary>
            <param name="predicted">1xN matrix of predicted probabilities.</param>
            <param name="targetMatrix">The target matrix of ones or zeroes.</param>
            <param name="trueVariance">1xN matrix of true labels (one-hot encoded).</param>
            <returns>The computed loss.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceBinaryThresholdSearchLossOperation.Backward">
            <summary>
            Computes the gradient with respect to the predicted probabilities.
            </summary>
            <returns>1xN matrix of gradients.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceLossOperation">
            <summary>
            Categorical variance loss operation.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceLossOperation.Forward(ParallelReverseAutoDiff.RMAD.Matrix,System.Int32,System.Double)">
            <summary>
            Performs the forward operation.
            </summary>
            <param name="predicted">1xN matrix of predicted probabilities.</param>
            <param name="targetIndex">The index of the target label.</param>
            <param name="trueVariance">1xN matrix of true labels (one-hot encoded).</param>
            <returns>The computed loss.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.CategoricalVarianceLossOperation.Backward">
            <summary>
            Computes the gradient with respect to the predicted probabilities.
            </summary>
            <returns>1xN matrix of gradients.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.VarianceAlphaSearchLossOperation">
            <summary>
            Variance alpha search loss operation.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.VarianceAlphaSearchLossOperation.Forward(ParallelReverseAutoDiff.RMAD.Matrix,System.Double,System.Double)">
            <summary>
            Performs the forward operation.
            </summary>
            <param name="predicted">1xN matrix of predicted probabilities.</param>
            <param name="trueVariance">A scalar value for the true variance.</param>
            <param name="trueMaxMin">A scalar value for the true max-min.</param>
            <returns>The computed loss.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.VarianceAlphaSearchLossOperation.Backward">
            <summary>
            Computes the gradient with respect to the predicted probabilities.
            </summary>
            <returns>1xN matrix of gradients.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.VarianceLossOperation">
            <summary>
            Variance loss operation.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.VarianceLossOperation.Forward(ParallelReverseAutoDiff.RMAD.Matrix,System.Double)">
            <summary>
            Performs the forward operation.
            </summary>
            <param name="predicted">1xN matrix of predicted probabilities.</param>
            <param name="trueVariance">1xN matrix of true labels (one-hot encoded).</param>
            <returns>The computed loss.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.RMAD.VarianceLossOperation.Backward">
            <summary>
            Computes the gradient with respect to the predicted probabilities.
            </summary>
            <returns>1xN matrix of gradients.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingComputationGraph">
            <summary>
            An embedding computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingComputationGraph.#ctor(ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingComputationGraph.TypeRetrieved(System.String)">
            <summary>
            Lifecycle method to retrieve the type of the operation.
            </summary>
            <param name="type">The type.</param>
            <returns>The retrieved type.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork">
            <summary>
            An embedding neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork"/> class.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numQueries">The number of queries.</param>
            <param name="numNodes">The number of nodes.</param>
            <param name="numFeatures">The number of features.</param>
            <param name="numIndices">The number of indices.</param>
            <param name="alphabetSize">The alphabet size.</param>
            <param name="embeddingSize">The embedding size.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.Input">
            <summary>
            Gets the input matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.Output">
            <summary>
            Gets the output matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.NumPath">
            <summary>
            Gets or sets the count of the path.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.AlphabetSize">
            <summary>
            Gets the alphabet size of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.NumIndices">
            <summary>
            Gets the number of indices of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.EmbeddingSize">
            <summary>
            Gets the embedding size of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.NumLayers">
            <summary>
            Gets the number of layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.NumQueries">
            <summary>
            Gets the number of queries of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.NumFeatures">
            <summary>
            Gets the number of features of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.NumNodes">
            <summary>
            Gets the number of nodes of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.StoreOperationIntermediates(System.Guid)">
            <summary>
            Store the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.RestoreOperationIntermediates(System.Guid)">
            <summary>
            Restore the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The forward pass of the edge attention neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            The backward pass of the edge attention neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.InitializeState">
            <summary>
            Initialize the state of the edge attention neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.ClearState">
            <summary>
            Clear the state of the edge attention neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.Embedding.EmbeddingNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initialize the computation graph of the edge attention neural network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork">
            <summary>
            Finite state machine traversal neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.#ctor(ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork"/> class.
            </summary>
            <param name="maze">The maze.</param>
            <param name="numNodes">The number of nodes.</param>
            <param name="numIndices">The number of indices.</param>
            <param name="alphabetSize">The alphabet size.</param>
            <param name="embeddingSize">The embedding size.</param>
            <param name="numLayers">The number of layers.</param>
            <param name="numQueries">The number of queries.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip Value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.Maze">
            <summary>
            Gets the maze.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.Reset">
            <summary>
            Reset the network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.AdjustLearningRate(System.Double)">
            <summary>
            Adjusts the learning rate.
            </summary>
            <param name="learningRate">The learning rate.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.Reinitialize(ParallelReverseAutoDiff.FsmnnExample.Amaze.Maze)">
            <summary>
            Reinitialize with new maze.
            </summary>
            <param name="maze">The maze.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.Initialize">
            <summary>
            Initializes the model layers.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.SaveWeights">
            <summary>
            Save the weights to the save path.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.ApplyWeights">
            <summary>
            Apply the weights from the save path.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.ApplyGradients">
            <summary>
            Apply the gradients to update the weights.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.RevertUpdate">
            <summary>
            Reverts the weight update.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.Forward">
            <summary>
            Make a forward pass through the computation graph.
            </summary>
            <returns>The gradient of the loss wrt the output.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.Forward2(System.Double)">
            <summary>
            Make a forward pass through the computation graph.
            </summary>
            <param name="trueMaxMin">The true max min.</param>
            <returns>The gradient of the loss wrt the output.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.FsmnnExample.FiniteStateMachine.TraversalNetwork.FiniteStateMachineTraversalNeuralNetwork.Backward(ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            The backward pass through the computation graph.
            </summary>
            <param name="gradientOfLossWrtOutput">The gradient of the loss wrt the output.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils">
            <summary>
            A collection of matrix utilities for neural network development.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.Random">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeZeroMatrix(System.Int32,System.Int32)">
            <summary>
            Creates an empty matrix of the given size.
            </summary>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>An empty matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeZeroMatrix(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an empty matrix of the given size.
            </summary>
            <param name="numLayers">The number of lauers.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>An empty matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeZeroMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an empty matrix of the given size.
            </summary>
            <param name="numTimeSteps">The number of time steps.</param>
            <param name="numLayers">The number of layers.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>An empty matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.DeepMatrix[][],System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.DeepMatrix[],System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.DeepMatrix,System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.Matrix,System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.Matrix[],System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.StandardizedMatrix(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            Creates a standardized matrix using the mean and standard deviation.
            </summary>
            <param name="deepMatrix">The matrix to process.</param>
            <returns>The standardized matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.StandardizedMatrix(ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Creates a standardized matrix using the mean and standard deviation.
            </summary>
            <param name="matrix">The matrix to process.</param>
            <returns>The standardized matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.To2DArray(ParallelReverseAutoDiff.RMAD.Matrix[])">
            <summary>
            Creates a 2-D array from the specified matrices.
            </summary>
            <param name="matrices">The matrices.</param>
            <returns>The 2-D array.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.To1DArray(ParallelReverseAutoDiff.RMAD.Matrix[])">
            <summary>
            Creates a 1-D array from the specified matrices.
            </summary>
            <param name="matrices">The matrices.</param>
            <returns>The 1-D array.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlace(ParallelReverseAutoDiff.RMAD.Matrix[],ParallelReverseAutoDiff.RMAD.Matrix[])">
            <summary>
            Sets the following matrices to the specified values.
            </summary>
            <param name="matrices">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlace(ParallelReverseAutoDiff.RMAD.DeepMatrix,ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            Sets the following deep matrix to the specified values.
            </summary>
            <param name="matrix">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlace(ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix,ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix)">
            <summary>
            Sets the following matrices to the specified values.
            </summary>
            <param name="matrices">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlace(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Sets the following matrix to the specified values.
            </summary>
            <param name="matrix">The matrix to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.IsAllZeroes(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            Calculates whether the deep matrix is all zeroes.
            </summary>
            <param name="matrix">The deep matrix.</param>
            <returns>A value.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.IsAllZeroes(ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Calculates whether the matrix is all zeroes.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A value.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClearMatrices(ParallelReverseAutoDiff.RMAD.Matrix[])">
            <summary>
            Clears the following 2-D matrices.
            </summary>
            <param name="matrices">The 2-D matrices to clear.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClearMatrices(ParallelReverseAutoDiff.RMAD.DeepMatrix[][])">
            <summary>
            Clears the following 5-D deep matrices.
            </summary>
            <param name="matrices">The 5-D deep matrices to clear.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClearMatrices(ParallelReverseAutoDiff.RMAD.DeepMatrix[])">
            <summary>
            Clears the following 4-D deep matrices.
            </summary>
            <param name="matrices">The 4-D deep matrices to clear.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.FrobeniusNorm(ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            The Frobenius norm of a matrix: the square root of the sum of the absolute squares of its elements.
            </summary>
            <param name="weightMatrix">The weight matrix to calculate.</param>
            <returns>The frobenius norm.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.LearningRateReductionFactor(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the reduction factor for the learning rate.
            </summary>
            <param name="frobeniusNorm">The frobenius norm of a matrix.</param>
            <param name="maxNorm">The max norm.</param>
            <param name="minFactor">The minimum learning rate reduction factor.</param>
            <returns>The learning rate reduction factor.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.HadamardProduct(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            The element-wise Hadamard product of two matrices.
            </summary>
            <param name="matrixA">The first matrix.</param>
            <param name="matrixB">The second matrix.</param>
            <returns>The resultant matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.MatrixAdd(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Add two matrices together.
            </summary>
            <param name="a">Matrix A.</param>
            <param name="b">Matrix B.</param>
            <returns>The resultant matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ScalarMultiply(System.Double,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="matrix">The matrix.</param>
            <returns>The resultant matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeRandomMatrixWithXavierInitialization(System.Int32,System.Int32)">
            <summary>
            Initialize random matrix with Xavier initialization using the appropriate dimensions.
            </summary>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>The initialized random matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeRandomMatrixWithXavierInitialization(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize random matrix with Xavier initialization using the appropriate dimensions.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>The initialized random matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeRandomMatrixWithXavierInitialization(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize random matrix with Xavier initialization using the appropriate dimensions.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numFilters">The number of filters.</param>
            <param name="depth">The depth.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>The initialized random matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeRandomMatrixWithXavierInitialization(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize random matrix with Xavier initialization using the appropriate dimensions.
            </summary>
            <param name="numFilters">The number of filters.</param>
            <param name="depth">The depth.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>The initialized random matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SwitchFirstTwoDimensions(ParallelReverseAutoDiff.RMAD.DeepMatrix[])">
            <summary>
            Switch the first two dimensions of the deep matrix array.
            </summary>
            <param name="deepMatrixArray">The deep matrix array.</param>
            <returns>The deep matrix array switched.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlaceReplace(ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix,ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix)">
            <summary>
            Sets the following matrices to the specified values.
            </summary>
            <param name="matrices">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlaceReplace(ParallelReverseAutoDiff.RMAD.DeepMatrix,ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            Sets the following matrices to the specified values.
            </summary>
            <param name="matrices">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlaceReplace(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Sets the following matrix to the specified values.
            </summary>
            <param name="matrix">The matrix to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.Common.EmbeddedResource">
            <summary>
            Helper class to read embedded resources.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.EmbeddedResource.ReadAllJson(System.String,System.String)">
            <summary>
            Reads a JSON file from the embedded resources.
            </summary>
            <param name="name">The namespace.</param>
            <param name="file">The file to read.</param>
            <returns>The text of the file.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.Common.IEnumerableExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.IEnumerableExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the item and its index.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="source">The source enumerable.</param>
            <returns>The target enumerable.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.IEnumerableExtensions.WithNext``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the item and the next item.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="source">The source enumerable.</param>
            <returns>The target enumerable.</returns>
        </member>
    </members>
</doc>
