<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ParallelReverseAutoDiff.GnnExample</name>
    </assembly>
    <members>
        <member name="T:ParallelReverseAutoDiff.GnnExample.AdjacencyMatrixGenerator">
            <summary>
            An adjacency matrix generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.AdjacencyMatrixGenerator.Generate">
            <summary>
            Generate an adjacency matrix.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.ArtifactDictionaryGenerator">
            <summary>
            An artifact dictionary generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ArtifactDictionaryGenerator.Generate">
            <summary>
            Generate an artifact dictionary.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.ChessBoardLoader">
            <summary>
            A chess board loader.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessBoardLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.ChessBoardLoader"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessBoardLoader.GetTotal">
            <summary>
            Gets the total.
            </summary>
            <returns>The total.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessBoardLoader.GetFileName(System.Int32)">
            <summary>
            Get the file name.
            </summary>
            <param name="skip">How many files to skip.</param>
            <returns>The file name.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessBoardLoader.LoadMoves(System.Int32)">
            <summary>
            Load the chess board.
            </summary>
            <param name="skip">How many files to skip.</param>
            <returns>The chess board list of moves.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator">
            <summary>
            Chess game evaluator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator"/> class.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.Random">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.ComputeReward(ParallelReverseAutoDiff.GnnExample.GameState,Chess.PieceColor,Chess.Move)">
            <summary>
            Compute the reward.
            </summary>
            <param name="state">The game state.</param>
            <param name="color">The piece color.</param>
            <param name="move">The move.</param>
            <returns>The computed reward.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.GetMoveScore(Chess.Move)">
            <summary>
            Gets the score of a move.
            </summary>
            <param name="move">The move.</param>
            <returns>The move score.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.GetFeatureValues(ParallelReverseAutoDiff.GnnExample.GameState,Chess.PieceColor)">
            <summary>
            Gets the feature values of a game state.
            </summary>
            <param name="state">The game state.</param>
            <param name="color">The piece color.</param>
            <returns>The feature values.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.GetTacticScore(ParallelReverseAutoDiff.GnnExample.GameState,Chess.PieceColor,System.Collections.Generic.List{Chess.Move})">
            <summary>
            Gets a score for tactical advantage.
            </summary>
            <param name="state">The game state.</param>
            <param name="color">The piece color.</param>
            <param name="allMoves">All moves.</param>
            <returns>The tactic score.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.GetPieceDevelopment(ParallelReverseAutoDiff.GnnExample.GameState,Chess.PieceColor)">
            <summary>
            Get a score for piece development.
            </summary>
            <param name="state">The game state.</param>
            <param name="color">The piece color.</param>
            <returns>The piece development score.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.GetPawnStructureScore(ParallelReverseAutoDiff.GnnExample.GameState,Chess.PieceColor)">
            <summary>
            Gets the pawn structure score.
            </summary>
            <param name="state">The game state.</param>
            <param name="color">The piece color.</param>
            <returns>The pawn structure score.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ChessMoveEvaluator.ComputeReward(ParallelReverseAutoDiff.GnnExample.GameState,Chess.PieceColor)">
            <summary>
            Compute the reward.
            </summary>
            <param name="state">The game state.</param>
            <param name="color">The piece color.</param>
            <returns>The rwward.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils">
            <summary>
            A collection of matrix utilities for neural network development.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.Random">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeZeroMatrix(System.Int32,System.Int32)">
            <summary>
            Creates an empty matrix of the given size.
            </summary>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>An empty matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeZeroMatrix(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an empty matrix of the given size.
            </summary>
            <param name="numLayers">The number of lauers.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>An empty matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeZeroMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an empty matrix of the given size.
            </summary>
            <param name="numTimeSteps">The number of time steps.</param>
            <param name="numLayers">The number of layers.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>An empty matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.DeepMatrix[][],System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.DeepMatrix[],System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.DeepMatrix,System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.Matrix,System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClipGradients(ParallelReverseAutoDiff.RMAD.Matrix[],System.Double,System.Nullable{System.Double})">
            <summary>
            Clips gradients to within a certain clip value and applies a minimum threshold value.
            </summary>
            <param name="gradients">The gradients to clip.</param>
            <param name="clipValue">The maximum clipValue in either the positive or negative direction.</param>
            <param name="minValue">The minimum threshold value.</param>
            <returns>The clipped gradients.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.StandardizedMatrix(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            Creates a standardized matrix using the mean and standard deviation.
            </summary>
            <param name="deepMatrix">The matrix to process.</param>
            <returns>The standardized matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.StandardizedMatrix(ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Creates a standardized matrix using the mean and standard deviation.
            </summary>
            <param name="matrix">The matrix to process.</param>
            <returns>The standardized matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.To2DArray(ParallelReverseAutoDiff.RMAD.Matrix[])">
            <summary>
            Creates a 2-D array from the specified matrices.
            </summary>
            <param name="matrices">The matrices.</param>
            <returns>The 2-D array.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.To1DArray(ParallelReverseAutoDiff.RMAD.Matrix[])">
            <summary>
            Creates a 1-D array from the specified matrices.
            </summary>
            <param name="matrices">The matrices.</param>
            <returns>The 1-D array.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlace(ParallelReverseAutoDiff.RMAD.Matrix[],ParallelReverseAutoDiff.RMAD.Matrix[])">
            <summary>
            Sets the following matrices to the specified values.
            </summary>
            <param name="matrices">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlace(ParallelReverseAutoDiff.RMAD.DeepMatrix,ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            Sets the following deep matrix to the specified values.
            </summary>
            <param name="matrix">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlace(ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix,ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix)">
            <summary>
            Sets the following matrices to the specified values.
            </summary>
            <param name="matrices">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlace(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Sets the following matrix to the specified values.
            </summary>
            <param name="matrix">The matrix to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.IsAllZeroes(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            Calculates whether the deep matrix is all zeroes.
            </summary>
            <param name="matrix">The deep matrix.</param>
            <returns>A value.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.IsAllZeroes(ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Calculates whether the matrix is all zeroes.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A value.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClearMatrices(ParallelReverseAutoDiff.RMAD.Matrix[])">
            <summary>
            Clears the following 2-D matrices.
            </summary>
            <param name="matrices">The 2-D matrices to clear.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClearMatrices(ParallelReverseAutoDiff.RMAD.DeepMatrix[][])">
            <summary>
            Clears the following 5-D deep matrices.
            </summary>
            <param name="matrices">The 5-D deep matrices to clear.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ClearMatrices(ParallelReverseAutoDiff.RMAD.DeepMatrix[])">
            <summary>
            Clears the following 4-D deep matrices.
            </summary>
            <param name="matrices">The 4-D deep matrices to clear.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.FrobeniusNorm(ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            The Frobenius norm of a matrix: the square root of the sum of the absolute squares of its elements.
            </summary>
            <param name="weightMatrix">The weight matrix to calculate.</param>
            <returns>The frobenius norm.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.LearningRateReductionFactor(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the reduction factor for the learning rate.
            </summary>
            <param name="frobeniusNorm">The frobenius norm of a matrix.</param>
            <param name="maxNorm">The max norm.</param>
            <param name="minFactor">The minimum learning rate reduction factor.</param>
            <returns>The learning rate reduction factor.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.HadamardProduct(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            The element-wise Hadamard product of two matrices.
            </summary>
            <param name="matrixA">The first matrix.</param>
            <param name="matrixB">The second matrix.</param>
            <returns>The resultant matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.MatrixAdd(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Add two matrices together.
            </summary>
            <param name="a">Matrix A.</param>
            <param name="b">Matrix B.</param>
            <returns>The resultant matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.ScalarMultiply(System.Double,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="matrix">The matrix.</param>
            <returns>The resultant matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeRandomMatrixWithXavierInitialization(System.Int32,System.Int32)">
            <summary>
            Initialize random matrix with Xavier initialization using the appropriate dimensions.
            </summary>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>The initialized random matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeRandomMatrixWithXavierInitialization(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize random matrix with Xavier initialization using the appropriate dimensions.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>The initialized random matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeRandomMatrixWithXavierInitialization(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize random matrix with Xavier initialization using the appropriate dimensions.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numFilters">The number of filters.</param>
            <param name="depth">The depth.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>The initialized random matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.InitializeRandomMatrixWithXavierInitialization(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize random matrix with Xavier initialization using the appropriate dimensions.
            </summary>
            <param name="numFilters">The number of filters.</param>
            <param name="depth">The depth.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>The initialized random matrix.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SwitchFirstTwoDimensions(ParallelReverseAutoDiff.RMAD.DeepMatrix[])">
            <summary>
            Switch the first two dimensions of the deep matrix array.
            </summary>
            <param name="deepMatrixArray">The deep matrix array.</param>
            <returns>The deep matrix array switched.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlaceReplace(ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix,ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix)">
            <summary>
            Sets the following matrices to the specified values.
            </summary>
            <param name="matrices">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.CommonMatrixUtils.SetInPlaceReplace(ParallelReverseAutoDiff.RMAD.DeepMatrix,ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            Sets the following matrices to the specified values.
            </summary>
            <param name="matrices">The matrices to replace.</param>
            <param name="value">The values to replace the matrix values with.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.Common.EmbeddedResource">
            <summary>
            Helper class to read embedded resources.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.EmbeddedResource.ReadAllJson(System.String,System.String)">
            <summary>
            Reads a JSON file from the embedded resources.
            </summary>
            <param name="name">The namespace.</param>
            <param name="file">The file to read.</param>
            <returns>The text of the file.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.Common.IEnumerableExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.IEnumerableExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the item and its index.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="source">The source enumerable.</param>
            <returns>The target enumerable.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.Common.IEnumerableExtensions.WithNext``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the item and the next item.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="source">The source enumerable.</param>
            <returns>The target enumerable.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.EvaluationSquare">
            <summary>
            The evaluation square.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.Left">
            <summary>
            Gets or sets the left neighbor.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.TopLeft">
            <summary>
            Gets or sets the top left neighbor.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.Top">
            <summary>
            Gets or sets the top neighbor.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.Right">
            <summary>
            Gets or sets the right neighbor.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.TopRight">
            <summary>
            Gets or sets the top right neighbor.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.Bottom">
            <summary>
            Gets or sets the bottom neighbor.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.BottomLeft">
            <summary>
            Gets or sets the bottom left neighbor.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.BottomRight">
            <summary>
            Gets or sets the bottom right neighbor.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.Piece">
            <summary>
            Gets or sets the piece.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.ReceivedMessages">
            <summary>
            Gets or sets the received messages.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.WhiteMessages">
            <summary>
            Gets the white messages.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.BlackMessages">
            <summary>
            Gets the black messages.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.WhiteEnumCounts">
            <summary>
            Gets the white enum counts.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.BlackEnumCounts">
            <summary>
            Gets the black enum counts.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.MaxWhiteEnumCount">
            <summary>
            Gets the max white enum count.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.MaxBlackEnumCount">
            <summary>
            Gets the max black enum count.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.SetNeighbors(ParallelReverseAutoDiff.GnnExample.EvaluationSquare,ParallelReverseAutoDiff.GnnExample.EvaluationSquare,ParallelReverseAutoDiff.GnnExample.EvaluationSquare,ParallelReverseAutoDiff.GnnExample.EvaluationSquare,ParallelReverseAutoDiff.GnnExample.EvaluationSquare,ParallelReverseAutoDiff.GnnExample.EvaluationSquare,ParallelReverseAutoDiff.GnnExample.EvaluationSquare,ParallelReverseAutoDiff.GnnExample.EvaluationSquare)">
            <summary>
            Set the neighbors.
            </summary>
            <param name="top">The top neighbor.</param>
            <param name="left">The left neighbor.</param>
            <param name="bottom">The bottom neighbor.</param>
            <param name="right">The right neighbor.</param>
            <param name="topLeft">The top left neighbor.</param>
            <param name="topRight">The top right neighbor.</param>
            <param name="bottomLeft">The bottom left neighbor.</param>
            <param name="bottomRight">The bottom right neigbor.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.ReceiveMessage(ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessage)">
            <summary>
            Receive the message.
            </summary>
            <param name="message">The message to receive.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.PassMessage(ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType,System.Boolean,ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessage)">
            <summary>
            Pass a message to a neighbor.
            </summary>
            <param name="messageType">The message type.</param>
            <param name="passAlong">A value indicating whether to pass the message along.</param>
            <param name="message">The message to pass.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationSquare.PassMessages">
            <summary>
            Pass the messages along.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessage">
            <summary>
            The evaluation square message.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessage.SourcePiece">
            <summary>
            Gets or sets the source piece.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessage.SourcePosition">
            <summary>
            Gets or sets the source position.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessage.Type">
            <summary>
            Gets or sets the type of the message.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessage.FromDirection">
            <summary>
            Gets the from direction of the message.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessage.PassAlong">
            <summary>
            Gets or sets a value indicating whether to pass along the message.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType">
            <summary>
            The evaluation square message type.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType.Top">
            <summary>
            Moving the piece to the top.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType.Left">
            <summary>
            Moving the piece to the left.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType.Bottom">
            <summary>
            Moving the piece to the bottom.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType.Right">
            <summary>
            Moving the piece to the right.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType.TopLeft">
            <summary>
            Moving the piece to the top left.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType.TopRight">
            <summary>
            Moving the piece to the top right.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType.BottomLeft">
            <summary>
            Moving the piece to the bottom left.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.EvaluationSquareMessageType.BottomRight">
            <summary>
            Moving the piece to the bottom right.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.EvaluationTable">
            <summary>
            The evaluation table.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.EvaluationTable.Squares">
            <summary>
            Gets or sets the evaluation squares.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationTable.SetTable(ParallelReverseAutoDiff.GnnExample.GameState)">
            <summary>
            Sets the table.
            </summary>
            <param name="state">The game state.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationTable.ToSquare(System.Int32,System.Int32)">
            <summary>
            Get the to square.
            </summary>
            <param name="rank">The rank.</param>
            <param name="file">The file.</param>
            <returns>The evaluation square.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationTable.PassMessages">
            <summary>
            Pass the messages.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationTable.GetSquareControl(Chess.Position,Chess.PieceColor)">
            <summary>
            Get the square control.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <returns>The square control.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.EvaluationTable.GetStackedScore(Chess.PieceColor)">
            <summary>
            Gets the stacked score.
            </summary>
            <param name="color">The piece color.</param>
            <returns>The stacked score.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.FenGenerator">
            <summary>
            A FEN generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.FenGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.FenGenerator"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.FenGenerator.LoadData">
            <summary>
            Loads the data.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GameGenerator">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.GameGenerator"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBothAndSaveLeela(System.String,System.Int32)">
            <summary>
            Generate for both chess engines and save.
            </summary>
            <param name="dir">The directory to save to.</param>
            <param name="iterations">The number of iterations.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBothAndSave(System.String,System.Int32)">
            <summary>
            Generate for both chess engines and save.
            </summary>
            <param name="dir">The directory to save to.</param>
            <param name="iterations">The number of iterations.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBothAndSaveSwitch(System.String,System.Int32)">
            <summary>
            Generate for both chess engines and save switch.
            </summary>
            <param name="dir">The directory to save to.</param>
            <param name="iterations">The number of iterations.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBothAndSaveOpposite(System.String,System.Int32)">
            <summary>
            Generate for both chess engines and save opposite.
            </summary>
            <param name="dir">The directory to save to.</param>
            <param name="iterations">The number of iterations.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBothOppositeStrict">
            <summary>
            Generates for both chess engines opposite strict.
            </summary>
            <returns>The PGN.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBothOpposite">
            <summary>
            Generates for both chess engines opposite.
            </summary>
            <returns>The PGN.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBothLeelaStockfish">
            <summary>
            Generates for both chess engines.
            </summary>
            <returns>The PGN.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBothLeela">
            <summary>
            Generates for both chess engines.
            </summary>
            <returns>The PGN.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.GenerateBoth">
            <summary>
            Generates for both chess engines.
            </summary>
            <returns>The PGN.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameGenerator.Generate">
            <summary>
            Generates a chess game.
            </summary>
            <returns>The game in PGN format.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GamePhase">
            <summary>
            The game phase.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.GamePhase.Opening">
            <summary>
            The opening.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.GamePhase.MiddleGame">
            <summary>
            The middle game.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.GnnExample.GamePhase.EndGame">
            <summary>
            The end game.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GameState">
            <summary>
            The chess game state.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.GameState"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.#ctor(Chess.ChessBoard)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.GameState"/> class.
            </summary>
            <param name="board">The chess board.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GameState.Board">
            <summary>
            Gets or sets the chess game board.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GameState.BoardSize">
            <summary>
            Gets or sets the board size.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetGapEdge(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph,Chess.Move,System.Collections.Generic.List{Chess.Move},Chess.PieceColor)">
            <summary>
            Gets the GAP edge from the move.
            </summary>
            <param name="graph">The graph.</param>
            <param name="move">The move.</param>
            <param name="legalMoves">The legal moves.</param>
            <param name="turn">The turn.</param>
            <returns>The gap edge.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetGapPath(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph,System.String,Chess.Move,System.Collections.Generic.List{Chess.Move},System.Collections.Generic.List{Chess.Move},Chess.PieceColor)">
            <summary>
            Gets the GAP path from the move.
            </summary>
            <param name="graph">The graph.</param>
            <param name="move">The move.</param>
            <param name="nextmove">The next move.</param>
            <param name="legalBothMoves">The legal both moves.</param>
            <param name="legalMoves">The legal moves.</param>
            <param name="turn">The turn.</param>
            <returns>The GAP path.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetPath(Chess.Move)">
            <summary>
            Gets the path from a move.
            </summary>
            <param name="move">A move.</param>
            <returns>The list of positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetPositionsOnBoard">
            <summary>
            Gets the positions on the board.
            </summary>
            <returns>The positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetPiecesAndTheirPositions">
            <summary>
            Gets pieces and their positions.
            </summary>
            <returns>Pieces and their positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetGamePhase">
            <summary>
            Gets the game phase.
            </summary>
            <returns>The game phase.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetMoves">
            <summary>
            Get all moves.
            </summary>
            <returns>All moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetKingSquare(Chess.PieceColor)">
            <summary>
            Gets the king square.
            </summary>
            <param name="color">The piece color.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetPieceAt(Chess.Position)">
            <summary>
            Gets the piece at the position.
            </summary>
            <param name="position">The position.</param>
            <returns>The piece.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetPieceAt(System.Int32)">
            <summary>
            Gets the piece at the position.
            </summary>
            <param name="position">The position.</param>
            <returns>The piece.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllMoves">
            <summary>
            Get all possible moves.
            </summary>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllMovesForColor(Chess.PieceColor,System.Collections.Generic.List{Chess.Move})">
            <summary>
            Get all moves for a piece color.
            </summary>
            <param name="color">The color.</param>
            <param name="allMoves">The list of all moves.</param>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllMovesForColorAndType(Chess.PieceColor,Chess.PieceType)">
            <summary>
            Get all moves for a piece's color and type.
            </summary>
            <param name="color">The color.</param>
            <param name="type">The type.</param>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetLegalMoves(System.Int32)">
            <summary>
            Get all of the legal moves for a position integer.
            </summary>
            <param name="position">The position integer.</param>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetLegalMoves(Chess.Position)">
            <summary>
            Get all the legal moves for a certain position.
            </summary>
            <param name="position">The position.</param>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetLegalMovesForPositionAndColor(Chess.Position,Chess.PieceColor)">
            <summary>
            Gets the legal moves for a position and color.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllMovesForPositionAndColor(Chess.Position,Chess.PieceColor)">
            <summary>
            Gets all possible moves for the position and color.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllMovesForPositionAndColor(Chess.Position,Chess.PieceColor,System.Collections.Generic.List{Chess.Move})">
            <summary>
            Gets all possible moves for the position and color.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="allMoves">All possible moves.</param>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.MoveRandomly">
            <summary>
            Makes a random and move and returns it.
            </summary>
            <returns>The move made.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.MoveRandomly(System.Collections.Generic.List{Chess.Move})">
            <summary>
            Chooses a ramdom move from the list.
            </summary>
            <param name="moves">The list of moves.</param>
            <returns>The move.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.LastMoves(System.Int32)">
            <summary>
            Get the last number of moves.
            </summary>
            <param name="numOfMoves">The number of moves.</param>
            <returns>The list of moves.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.IsGameOver">
            <summary>
            Is the game over.
            </summary>
            <returns>Whether the game is over.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.IsValid(System.Int32,System.Int32)">
            <summary>
            Is the position valid by rank and file.
            </summary>
            <param name="rank">The rank.</param>
            <param name="file">The file.</param>
            <returns>Whether the position is valid.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.IsValidMove(Chess.Move)">
            <summary>
            Is the chess move valid.
            </summary>
            <param name="move">The move.</param>
            <returns>Whether the move is valid.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllPositions">
            <summary>
            Gets all positions on the chess board.
            </summary>
            <returns>The list of positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllKingPositionsFrom(Chess.Position)">
            <summary>
            Gets all king positions from a position.
            </summary>
            <param name="position">The position.</param>
            <returns>The list of positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllRookPositionsFrom(Chess.Position)">
            <summary>
            Gets all rook positions from a position.
            </summary>
            <param name="position">A position.</param>
            <returns>The rook positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllBishopPositionsFrom(Chess.Position)">
            <summary>
            Gets all bishop positions from a position.
            </summary>
            <param name="position">A position.</param>
            <returns>The bishop positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllQueenPositionsFrom(Chess.Position)">
            <summary>
            Gets all queen positions from a position.
            </summary>
            <param name="position">A position.</param>
            <returns>The queen positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllPawnPositionsFrom(Chess.Position)">
            <summary>
            Gets all of the pawn positions from a position.
            </summary>
            <param name="position">The position.</param>
            <returns>The list of positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllKnightPositionsFrom(Chess.Position)">
            <summary>
            Gets all knight positions from a position.
            </summary>
            <param name="position">A position.</param>
            <returns>The knight positions.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.GetAllPieceTypes">
            <summary>
            Gets all piece types.
            </summary>
            <returns>A list of piece types.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.AddToMap(System.ValueTuple{Chess.Position,System.Char},System.ValueTuple{Chess.Position,Chess.MoveType,System.Nullable{System.Char},System.Nullable{System.Char}})">
            <summary>
            Add position to map.
            </summary>
            <param name="startPos">The start position.</param>
            <param name="moveInfo">The move info.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GameState.PopulateNodes(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph)">
            <summary>
            Populate the nodes.
            </summary>
            <param name="graph">The graph to populate.</param>
            <returns>The graph.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge">
            <summary>
            A GNN Edge.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.#ctor(ParallelReverseAutoDiff.GnnExample.GNN.GNNNode,ParallelReverseAutoDiff.GnnExample.GNN.GNNNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge"/> class.
            </summary>
            <param name="from">The from node.</param>
            <param name="to">The to node.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.From">
            <summary>
            Gets or sets the node from.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.To">
            <summary>
            Gets or sets the node to.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.MoveType">
            <summary>
            Gets or sets the move type.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.CapturePieceType">
            <summary>
            Gets or sets the capture piece type.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.PromotionPieceType">
            <summary>
            Gets or sets the promotion piece type.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.PieceType">
            <summary>
            Gets or sets the piece type.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNEdge.State">
            <summary>
            Gets or sets the node state.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GNN.GNNGraph">
            <summary>
            The GNN graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNGraph.Nodes">
            <summary>
            Gets or sets the GNN graph nodes.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNGraph.Edges">
            <summary>
            Gets or sets the GNN graph edges.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GNN.GNNMove">
            <summary>
            The GNN selected move.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNMove.NodeFrom">
            <summary>
            Gets or sets the node from.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNMove.NodeTo">
            <summary>
            Gets or sets the node to.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNMove.Score">
            <summary>
            Gets or sets the score for the move.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode">
            <summary>
            The GNN Node.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode.#ctor(Chess.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode.Type">
            <summary>
            Gets or sets the node type.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode.X">
            <summary>
            Gets or sets the node position X.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode.Y">
            <summary>
            Gets or sets the node position Y.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode.State">
            <summary>
            Gets or sets the node state.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode.Edges">
            <summary>
            Gets or sets the edges.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode.Messages">
            <summary>
            Gets or sets the messages from one hop away.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GNN.GNNNode.MessagesTwoHops">
            <summary>
            Gets or sets the messages from two hops away.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GridVector">
            <summary>
            A grid vector.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GridVector.#ctor(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.GridVector"/> class.
            </summary>
            <param name="startPiece">The start piece.</param>
            <param name="endPiece">The end piece.</param>
            <param name="start">The start.</param>
            <param name="end">Tne end.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GridVector.Start">
            <summary>
            Gets or sets the start.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GridVector.End">
            <summary>
            Gets or sets the end.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GridVector.StartPiece">
            <summary>
            Gets or sets the start piece.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GridVector.EndPiece">
            <summary>
            Gets or sets the end piece.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.GnnExample.GridVector.Angle">
            <summary>
            Gets or sets the angle.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.GridVectorDistributor">
            <summary>
            A grid vector distributor.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GridVectorDistributor.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.GridVectorDistributor"/> class.
            </summary>
            <param name="vectorStrings">The vector strings.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GridVectorDistributor.DistributeVectors">
            <summary>
            Distribute vectors.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GridVectorDistributor.PlaceVectorInGrid(ParallelReverseAutoDiff.GnnExample.GridVector)">
            <summary>
            Place vector in grid.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GridVectorDistributor.ParseAndCalculateVectors(System.Collections.Generic.List{System.String})">
            <summary>
            Parse and calculate vectors.
            </summary>
            <param name="vectorStrings">The vector strings.</param>
            <returns>The parsed vectors.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GridVectorDistributor.CalculateAngle(System.String,System.String)">
            <summary>
            Calculate angle.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.GridVectorDistributor.CalculateReverseAngle(System.Double)">
            <summary>
            Calculate reverse angle.
            </summary>
            <param name="originalAngle">The original angle.</param>
            <returns>The reverse angle.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.LeelaReader">
            <summary>
            Reads from Leela.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.LeelaReader.ReadBestMove(ParallelReverseAutoDiff.GnnExample.GameState)">
            <summary>
            Reads the best move from Stockfish.
            </summary>
            <param name="gameState">The game state.</param>
            <returns>The move and the next move.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.OpeningBook">
            <summary>
            An opening book of chess openings.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.OpeningBook.GetOpenings">
            <summary>
            Gets chess openings.
            </summary>
            <returns>The map.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.ProjectionGenerator">
            <summary>
            A projection generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ProjectionGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.ProjectionGenerator"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.ProjectionGenerator.Generate">
            <summary>
            Generates a projection.
            </summary>
            <returns>Returns a task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.RebelReader">
            <summary>
            Reads from Rebel.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.RebelReader.ReadBestMove(ParallelReverseAutoDiff.GnnExample.GameState)">
            <summary>
            Reads the best move from Stockfish.
            </summary>
            <param name="gameState">The game state.</param>
            <returns>The move and the next move.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator">
            <summary>
            A statistics generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator.Read">
            <summary>
            Reads the statistics.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator.Read2">
            <summary>
            Reads the statistics.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator.Read2a">
            <summary>
            Reads the statistics.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator.Read3">
            <summary>
            Reads the statistics.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator.Generate">
            <summary>
            Generates the statistics.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator.Generate2">
            <summary>
            Generates the statistics.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StatisticsGenerator.Generate3">
            <summary>
            Generates the statistics.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.StockfishReader">
            <summary>
            Reads from Stockfish.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StockfishReader.ReadBestMove(ParallelReverseAutoDiff.GnnExample.GameState)">
            <summary>
            Reads the best move from Stockfish.
            </summary>
            <param name="gameState">The game state.</param>
            <returns>The move and the next move.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.StockfishReader.ReadBestMoveScoreAsync(ParallelReverseAutoDiff.GnnExample.GameState,System.Int32)">
            <summary>
            Reads the best move from Stockfish.
            </summary>
            <param name="gameState">The game state.</param>
            <param name="depth">The depth.</param>
            <returns>The best move score.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.TrainingSetGenerator">
            <summary>
            A training set generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.TrainingSetGenerator"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetGenerator.Initialize">
            <summary>
            Initialize the training set generator.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetGenerator.AddToBag(System.Collections.Concurrent.ConcurrentBag{ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph},System.Random)">
            <summary>
            Add to bag of graphs.
            </summary>
            <param name="bagOfGraphs">The graphs.</param>
            <param name="rand">The random.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetGenerator.AddToBag(System.Collections.Concurrent.ConcurrentBag{ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph},System.String,Chess.Move,Chess.Move)">
            <summary>
            Add to bag of graphs.
            </summary>
            <param name="bagOfGraphs">The bag of graphs.</param>
            <param name="fen">The FEN string.</param>
            <param name="targetMove">The target move.</param>
            <param name="lastMove">The last move.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetGenerator.LoadData">
            <summary>
            Loads the data.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.GnnExample.TrainingSetLoader">
            <summary>
            A training set loader.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.GnnExample.TrainingSetLoader"/> class.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetLoader.LoadMiniBatchFromFen">
            <summary>
            Loads mini-batch from FEN string.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetLoader.LoadMiniBatchFromBag">
            <summary>
            Loads a mini-batch of training data from bag.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.GnnExample.TrainingSetLoader.LoadMiniBatch">
            <summary>
            Loads a mini-batch of training data.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmComputationGraph">
            <summary>
            An LSTM computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmComputationGraph.#ctor(ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork">
            <summary>
            An LSTM neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork"/> class.
            </summary>
            <param name="inputSize">The input size.</param>
            <param name="hiddenSize">The hidden size.</param>
            <param name="outputSize">The output size.</param>
            <param name="numTimeSteps">The number of time steps.</param>
            <param name="numLayers">The number of layers.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.OutputPathFeatures">
            <summary>
            Gets the output path features matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.Target">
            <summary>
            Gets the target matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.Architecture">
            <summary>
            Gets the JSON architecture.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers of the LSTM neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.NumLayers">
            <summary>
            Gets the number of layers of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.StoreOperationIntermediates(System.Guid)">
            <summary>
            Stores the intermediate values of the computation graph for the given operation.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.RestoreOperationIntermediates(System.Guid)">
            <summary>
            Restores the intermediate values of the computation graph for the given operation.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The forward pass for the LSTM neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass for the LSTM neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.InitializeState">
            <summary>
            Initialize the state of the LSTM neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.ClearState">
            <summary>
            Clears the state of the LSTM neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionLstm.LSTM.LstmNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initializes the computation graph of the LSTM neural network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingComputationGraph">
            <summary>
            An attention message passing computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingComputationGraph.#ctor(ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork">
            <summary>
            An attention message passing neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork"/> class.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numPaths">The number of paths.</param>
            <param name="numFeatures">The number of features.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.Input">
            <summary>
            Gets the input matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.Output">
            <summary>
            Gets the output matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.Target">
            <summary>
            Gets the target matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.ConnectedPathsDeepMatrixArray">
            <summary>
            Gets or sets the connected paths deep matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.DConnectedPathsDeepMatrixArray">
            <summary>
            Gets or sets the connected paths deep matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.NumLayers">
            <summary>
            Gets the number of layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.NumPaths">
            <summary>
            Gets the number of paths of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.NumFeatures">
            <summary>
            Gets the number of features of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.StoreOperationIntermediates(System.Guid)">
            <summary>
            Stores the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.RestoreOperationIntermediates(System.Guid)">
            <summary>
            Restores the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The forward pass of the attention message passing neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass of the attention message passing neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.InitializeState">
            <summary>
            Initializes the state of the attention message passing neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.ClearState">
            <summary>
            Clears the state of the attention message passing neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.AttentionMessagePassing.AttentionMessagePassingNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initializes the computation graph of the attention message passing neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionComputationGraph">
            <summary>
            An edge attention computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionComputationGraph.#ctor(ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork">
            <summary>
            An edge attention neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork"/> class.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numQueries">The number of queries.</param>
            <param name="numPaths">The number of paths.</param>
            <param name="numFeatures">The number of features.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.Input">
            <summary>
            Gets the input matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.Output">
            <summary>
            Gets the output matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.Target">
            <summary>
            Gets the target matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.NumLayers">
            <summary>
            Gets the number of layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.NumQueries">
            <summary>
            Gets the number of queries of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.NumFeatures">
            <summary>
            Gets the number of features of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.NumPaths">
            <summary>
            Gets the number of paths of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.StoreOperationIntermediates(System.Guid)">
            <summary>
            Store the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.RestoreOperationIntermediates(System.Guid)">
            <summary>
            Restore the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The forward pass of the edge attention neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass of the edge attention neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.InitializeState">
            <summary>
            Initialize the state of the edge attention neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.ClearState">
            <summary>
            Clear the state of the edge attention neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.EdgeAttention.EdgeAttentionNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initialize the computation graph of the edge attention neural network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingComputationGraph">
            <summary>
            An embedding computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingComputationGraph.#ctor(ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork">
            <summary>
            An embedding neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork"/> class.
            </summary>
            <param name="numIndices">The number of indices.</param>
            <param name="alphabetSize">The alphabet size.</param>
            <param name="embeddingSize">The embedding size.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.Input">
            <summary>
            Gets the input matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.HandPickedFeatures">
            <summary>
            Gets the hand picked features.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.Output">
            <summary>
            Gets the output matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.Target">
            <summary>
            Gets the target matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.AlphabetSize">
            <summary>
            Gets the alphabet size of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.NumIndices">
            <summary>
            Gets the number of indices of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.EmbeddingSize">
            <summary>
            Gets the embedding size of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.StoreOperationIntermediates(System.Guid)">
            <summary>
            Store the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.RestoreOperationIntermediates(System.Guid)">
            <summary>
            Restore the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The forward pass of the edge attention neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass of the edge attention neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.InitializeState">
            <summary>
            Initialize the state of the edge attention neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.ClearState">
            <summary>
            Clear the state of the edge attention neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Embedding.EmbeddingNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initialize the computation graph of the edge attention neural network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge">
            <summary>
            An edge of the GAP graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge"/> class.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.Id">
            <summary>
            Gets or sets the unique identifier of the edge.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.Node">
            <summary>
            Gets or sets the node that the edge connects to.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.NodeId">
            <summary>
            Gets or sets the node ID.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.Tag">
            <summary>
            Gets or sets a tag.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.FeatureVector">
            <summary>
            Gets or sets the feature vector of the edge.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.Features">
            <summary>
            Gets or sets the features.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.FeatureIndices">
            <summary>
            Gets or sets the feature indices.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.Move">
            <summary>
            Gets the move.
            </summary>
            <returns>The move.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapEdge.Populate(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph)">
            <summary>
            Populates the node with the node ID.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph">
            <summary>
            A graph attention paths graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph"/> class.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.Id">
            <summary>
            Gets or sets the unique identifier of the graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.GapEdges">
            <summary>
            Gets or sets the edges of the graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.GapNodes">
            <summary>
            Gets or sets the nodes of the graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.GapPaths">
            <summary>
            Gets or sets the paths of the graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.FenString">
            <summary>
            Gets or sets the fen string.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.AdjacencyMatrix">
            <summary>
            Gets or sets the adjacency matrix of the graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.NormalizedAdjacency">
            <summary>
            Gets or sets the normalized adjacency matrix of the graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.TargetPaths">
            <summary>
            Gets the target paths.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.UpdateFeatureIndices(System.Collections.Generic.Dictionary{System.String,System.Int32},System.String,System.String,ParallelReverseAutoDiff.GnnExample.GamePhase)">
            <summary>
            Update the feature indices.
            </summary>
            <param name="artifacts">The artifacts.</param>
            <param name="fen">The fen.</param>
            <param name="lastMove">The last move.</param>
            <param name="gamePhase">The game phase.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.UpdateFeatureVectors">
            <summary>
            Update feature vectors.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.UpdateFeatureVectors(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Double)">
            <summary>
            Update the feature vectors.
            </summary>
            <param name="map">The statistical map.</param>
            <param name="totalStats">The total statistics.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.FormAdjacencyMatrix">
            <summary>
            Forms the adjacency matrix.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph.Populate">
            <summary>
            Populate after deserialization.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode">
            <summary>
            A node in a graph attention path.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode"/> class.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.Id">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.PositionX">
            <summary>
            Gets or sets the node position X in the graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.PositionY">
            <summary>
            Gets or sets the node position Y in the graph.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.IsInPath">
            <summary>
            Gets or sets a value indicating whether the node is in the path.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.Tag">
            <summary>
            Gets or sets a tag.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.GapType">
            <summary>
            Gets or sets the type of node.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.FeatureVector">
            <summary>
            Gets or sets the feature vector of the node.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.Edges">
            <summary>
            Gets or sets the edges.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.EdgeIds">
            <summary>
            Gets or sets the edge identifiers.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.Populate(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph)">
            <summary>
            Populate the edges of the node.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode.ToString">
            <summary>
            An override of ToString.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath">
            <summary>
            The GAP path.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath"/> class.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.Id">
            <summary>
            Gets or sets an identifier for the path.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.IsTarget">
            <summary>
            Gets or sets a value indicating whether the path is the target.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.IsLegal">
            <summary>
            Gets or sets a value indicating whether the path is legal.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.IsYourTurn">
            <summary>
            Gets or sets a value indicating whether the path is your turn.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.MoveString">
            <summary>
            Gets or sets the move.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.EdgeId">
            <summary>
            Gets or sets the edge ID.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.GraphId">
            <summary>
            Gets or sets the graph index.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.AdjacencyIndex">
            <summary>
            Gets or sets the index of the adjacency matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.Nodes">
            <summary>
            Gets or sets the nodes of the path.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.NodeIds">
            <summary>
            Gets or sets the node IDs of the path.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.FeatureVector">
            <summary>
            Gets or sets the feature vector of the path.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.GapType">
            <summary>
            Gets the type of the path.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.Move">
            <summary>
            Gets the move.
            </summary>
            <returns>The move.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.Populate(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph)">
            <summary>
            Populates the nodes of the path based on the node IDs.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapPath.AddNode(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapNode)">
            <summary>
            Add a node to the path.
            </summary>
            <param name="node">The added node.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapType">
            <summary>
            The type of piece on the square.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapType.Empty">
            <summary>
            An empty square.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapType.Queen">
            <summary>
            The queen.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapType.King">
            <summary>
            The king.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapType.Knight">
            <summary>
            The knight.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapType.Bishop">
            <summary>
            The bishop.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapType.Rook">
            <summary>
            The rook.
            </summary>
        </member>
        <member name="F:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapType.Pawn">
            <summary>
            The pawn.
            </summary>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnComputationGraph">
            <summary>
            A GCN computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnComputationGraph.#ctor(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork">
            <summary>
            A GCN neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork"/> class.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numPaths">The number of paths.</param>
            <param name="numFeatures">The number of features.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.Input">
            <summary>
            Gets the input deep matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.Output">
            <summary>
            Gets the output matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.Target">
            <summary>
            Gets the target matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.Adjacency">
            <summary>
            Gets or sets the adjacency matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers for the GCN neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.NumLayers">
            <summary>
            Gets the number of layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.NumPaths">
            <summary>
            Gets the number of paths of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.NumFeatures">
            <summary>
            Gets the number of features of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix)">
            <summary>
            The forward pass of the GCN neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass of the GCN neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.InitializeState">
            <summary>
            Initializes the state of the GCN neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.ClearState">
            <summary>
            Clears the state of the GCN neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.GcnNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initializes the computation graph of the GCN neural network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmComputationGraph">
            <summary>
            An LSTM computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmComputationGraph.#ctor(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork">
            <summary>
            An LSTM neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork"/> class.
            </summary>
            <param name="inputSize">The input size.</param>
            <param name="hiddenSize">The hidden size.</param>
            <param name="outputSize">The output size.</param>
            <param name="numTimeSteps">The number of time steps.</param>
            <param name="numLayers">The number of layers.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.OutputPathFeatures">
            <summary>
            Gets the output path features matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.Target">
            <summary>
            Gets the target matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.Architecture">
            <summary>
            Gets the JSON architecture.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers of the LSTM neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.NumLayers">
            <summary>
            Gets the number of layers of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.StoreOperationIntermediates(System.Guid)">
            <summary>
            Stores the intermediate values of the computation graph for the given operation.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.RestoreOperationIntermediates(System.Guid)">
            <summary>
            Restores the intermediate values of the computation graph for the given operation.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.FourDimensionalMatrix)">
            <summary>
            The forward pass for the LSTM neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass for the LSTM neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.InitializeState">
            <summary>
            Initialize the state of the LSTM neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.ClearState">
            <summary>
            Clears the state of the LSTM neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.LstmNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initializes the computation graph of the LSTM neural network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutComputationGraph">
            <summary>
            A readout computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutComputationGraph.#ctor(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork">
            <summary>
            A readout neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork"/> class.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numQueries">The number of queries.</param>
            <param name="numPaths">The number of paths.</param>
            <param name="numFeatures">The number of features.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.Input">
            <summary>
            Gets the input matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.Output">
            <summary>
            Gets the output matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.Target">
            <summary>
            Gets the target matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.AV">
            <summary>
            Gets the AV matrix array.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.NumLayers">
            <summary>
            Gets the number of layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.NumQueries">
            <summary>
            Gets the number of queries of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.NumFeatures">
            <summary>
            Gets the number of features of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.NumPaths">
            <summary>
            Gets the number of paths of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The forward pass of the readout neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass of the readout neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.InitializeState">
            <summary>
            Initializes the state of the readout neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.ClearState">
            <summary>
            Clears the state of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GCN.ReadoutNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initializes the computation graph of the neural network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork">
            <summary>
            Graph Attention Paths Neural Network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.#ctor(System.Collections.Generic.List{ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork"/> class.
            </summary>
            <param name="graphs">The graphs.</param>
            <param name="numIndices">The number of indices.</param>
            <param name="alphabetSize">The alphabet size.</param>
            <param name="embeddingSize">The embedding size.</param>
            <param name="numLayers">The number of layers.</param>
            <param name="numQueries">The number of queries.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip Value.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.Reset">
            <summary>
            Reset the network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.Reinitialize(System.Collections.Generic.List{ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph})">
            <summary>
            Reinitialize with new graphs.
            </summary>
            <param name="graphs">The graphs.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.Initialize">
            <summary>
            Initializes the model layers.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.SaveWeights">
            <summary>
            Save the weights to the save path.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.ApplyWeights">
            <summary>
            Apply the weights from the save path.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.ApplyGradients">
            <summary>
            Apply the gradients to update the weights.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.Forward">
            <summary>
            Make a forward pass through the computation graph.
            </summary>
            <returns>The gradient of the loss wrt the output.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.GraphAttentionPathsNeuralNetwork.Backward(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass through the computation graph.
            </summary>
            <param name="gradientOfLossWrtReadoutOutput">The gradient of the loss wrt the output.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.IPopulate">
            <summary>
            The public interface for populating after deserialization.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.IPopulate.Populate(ParallelReverseAutoDiff.Test.GraphAttentionPaths.GapGraph)">
            <summary>
            Populates the graph after deserialization.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerComputationGraph">
            <summary>
            A transformer computation graph.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerComputationGraph.#ctor(ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerComputationGraph"/> class.
            </summary>
            <param name="net">The neural network.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerComputationGraph.DependenciesSetup(ParallelReverseAutoDiff.RMAD.IOperationBase,ParallelReverseAutoDiff.RMAD.LayerInfo)">
            <summary>
            Lifecycle method to setup the dependencies of the computation graph.
            </summary>
            <param name="operation">The operation.</param>
            <param name="layerInfo">The layer information.</param>
        </member>
        <member name="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork">
            <summary>
            A transformer neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork"/> class.
            </summary>
            <param name="numLayers">The number of layers.</param>
            <param name="numQueries">The number of queries.</param>
            <param name="numPaths">The number of paths.</param>
            <param name="numFeatures">The number of features.</param>
            <param name="alphabetSize">The alphabet size.</param>
            <param name="learningRate">The learning rate.</param>
            <param name="clipValue">The clip value.</param>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.Input">
            <summary>
            Gets the input matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.Output">
            <summary>
            Gets the output matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.Target">
            <summary>
            Gets the target matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.PositionIndices">
            <summary>
            Gets the position indices matrix.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.EdgeFeatureVector">
            <summary>
            Gets the edge feature vector.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.DEdgeFeatureVector">
            <summary>
            Gets the derivative of the edge feature vector.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.ModelLayers">
            <summary>
            Gets the model layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.NumLayers">
            <summary>
            Gets the number of layers of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.NumQueries">
            <summary>
            Gets the number of queries of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.NumFeatures">
            <summary>
            Gets the number of features of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.EdgeLength">
            <summary>
            Gets the edge length of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.AlphabetSize">
            <summary>
            Gets the alphabet size of the neural network.
            </summary>
        </member>
        <member name="P:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.NumPaths">
            <summary>
            Gets the number of paths of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.Initialize">
            <summary>
            Initializes the computation graph of the convolutional neural network.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.StoreOperationIntermediates(System.Guid)">
            <summary>
            Store the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.RestoreOperationIntermediates(System.Guid)">
            <summary>
            Restore the operation intermediates.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.AutomaticForwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The forward pass of the readout neural network.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.AutomaticBackwardPropagate(ParallelReverseAutoDiff.RMAD.DeepMatrix)">
            <summary>
            The backward pass of the readout neural network.
            </summary>
            <param name="gradient">The gradient of the loss.</param>
            <returns>The gradient.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.InitializeState">
            <summary>
            Initializes the state of the readout neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.ClearState">
            <summary>
            Clears the state of the neural network.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.Test.GraphAttentionPaths.Transformer.TransformerNeuralNetwork.InitializeComputationGraph">
            <summary>
            Initializes the computation graph of the neural network.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:ParallelReverseAutoDiff.RMAD.CosineDistanceLossOperation">
            <summary>
            Cosine distance loss operation.
            </summary>
        </member>
        <member name="M:ParallelReverseAutoDiff.RMAD.CosineDistanceLossOperation.Instantiate(ParallelReverseAutoDiff.RMAD.NeuralNetwork)">
            <summary>
            A common method for instantiating an operation.
            </summary>
            <param name="net">The neural network.</param>
            <returns>The instantiated operation.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.RMAD.CosineDistanceLossOperation.Forward(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Performs the forward operation for the cosine distance loss function.
            </summary>
            <param name="superpath">The superpath matrix.</param>
            <param name="targetPath">The target path matrix.</param>
            <returns>The scalar loss value.</returns>
        </member>
        <member name="M:ParallelReverseAutoDiff.RMAD.CosineDistanceLossOperation.Backward(ParallelReverseAutoDiff.RMAD.Matrix,ParallelReverseAutoDiff.RMAD.Matrix)">
            <summary>
            Runs the backward operation for the cosine distance loss function.
            </summary>
            <param name="dOutput">The gradient of the output.</param>
            <param name="targetMatrix">The target matrix.</param>
            <returns>The backward result.</returns>
        </member>
    </members>
</doc>
