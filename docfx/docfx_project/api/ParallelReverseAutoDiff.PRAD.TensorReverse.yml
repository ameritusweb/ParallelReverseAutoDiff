### YamlMime:ManagedReference
items:
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse
  commentId: T:ParallelReverseAutoDiff.PRAD.TensorReverse
  id: TensorReverse
  parent: ParallelReverseAutoDiff.PRAD
  children:
  - ParallelReverseAutoDiff.PRAD.TensorReverse.#ctor(ParallelReverseAutoDiff.PRAD.Tensor[])
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.String[])
  - ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors
  - ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  - ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[],System.Int32[],System.Int32[])
  - ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  - ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  - ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  - ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  langs:
  - csharp
  - vb
  name: TensorReverse
  nameWithType: TensorReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse
  type: Class
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: TensorReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 16
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Backward functions for tensors.
  example: []
  syntax:
    content: public class TensorReverse
    content.vb: Public Class TensorReverse
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.#ctor(ParallelReverseAutoDiff.PRAD.Tensor[])
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.#ctor(ParallelReverseAutoDiff.PRAD.Tensor[])
  id: '#ctor(ParallelReverseAutoDiff.PRAD.Tensor[])'
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: TensorReverse(Tensor[])
  nameWithType: TensorReverse.TensorReverse(Tensor[])
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.TensorReverse(ParallelReverseAutoDiff.PRAD.Tensor[])
  type: Constructor
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: .ctor
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 22
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Initializes a new instance of the <xref href="ParallelReverseAutoDiff.PRAD.TensorReverse" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public TensorReverse(Tensor[] tensors)
    parameters:
    - id: tensors
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The initial tensors.
    content.vb: Public Sub New(tensors As Tensor())
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.#ctor*
  nameWithType.vb: TensorReverse.New(Tensor())
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.New(ParallelReverseAutoDiff.PRAD.Tensor())
  name.vb: New(Tensor())
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors
  commentId: P:ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors
  id: InitialTensors
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: InitialTensors
  nameWithType: TensorReverse.InitialTensors
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors
  type: Property
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: InitialTensors
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 30
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Gets the initial tensors.
  example: []
  syntax:
    content: public Tensor[] InitialTensors { get; }
    parameters: []
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
    content.vb: Public Property InitialTensors As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseAddReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseAddReverse(Tensor)
  nameWithType: TensorReverse.ElementwiseAddReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseAddReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 37
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for element-wise addition.
  example: []
  syntax:
    content: public Tensor[] ElementwiseAddReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The gradient with respect to the input tensors.
    content.vb: Public Function ElementwiseAddReverse(upstreamGradient As Tensor) As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: LogReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: LogReverse(Tensor)
  nameWithType: TensorReverse.LogReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: LogReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 62
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the element-wise logarithm (base 10).
  example: []
  syntax:
    content: public Tensor LogReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function LogReverse(upstreamGradient As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: LnReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: LnReverse(Tensor)
  nameWithType: TensorReverse.LnReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: LnReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 82
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the element-wise natural logarithm (ln).
  example: []
  syntax:
    content: public Tensor LnReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function LnReverse(upstreamGradient As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: ExpReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ExpReverse(Tensor)
  nameWithType: TensorReverse.ExpReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ExpReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 102
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the element-wise exponential function (exp).
  example: []
  syntax:
    content: public Tensor ExpReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function ExpReverse(upstreamGradient As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseMultiplyReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseMultiplyReverse(Tensor)
  nameWithType: TensorReverse.ElementwiseMultiplyReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseMultiplyReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 122
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for element-wise multiplication.
  example: []
  syntax:
    content: public Tensor[] ElementwiseMultiplyReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The gradient with respect to the input tensors.
    content.vb: Public Function ElementwiseMultiplyReverse(upstreamGradient As Tensor) As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseSquareReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseSquareReverse(Tensor)
  nameWithType: TensorReverse.ElementwiseSquareReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseSquareReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 149
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for element-wise square.
  example: []
  syntax:
    content: public Tensor ElementwiseSquareReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function ElementwiseSquareReverse(upstreamGradient As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseSquareRootReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseSquareRootReverse(Tensor)
  nameWithType: TensorReverse.ElementwiseSquareRootReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseSquareRootReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 172
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the element-wise square root operation.
  example: []
  syntax:
    content: public Tensor ElementwiseSquareRootReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function ElementwiseSquareRootReverse(upstreamGradient As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseSinReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseSinReverse(Tensor)
  nameWithType: TensorReverse.ElementwiseSinReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseSinReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 200
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for element-wise sine.
  example: []
  syntax:
    content: public Tensor ElementwiseSinReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function ElementwiseSinReverse(upstreamGradient As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseCosReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseCosReverse(Tensor)
  nameWithType: TensorReverse.ElementwiseCosReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseCosReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 224
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for element-wise cosine.
  example: []
  syntax:
    content: public Tensor ElementwiseCosReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function ElementwiseCosReverse(upstreamGradient As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseAtan2Reverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseAtan2Reverse(Tensor, Tensor)
  nameWithType: TensorReverse.ElementwiseAtan2Reverse(Tensor, Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse(ParallelReverseAutoDiff.PRAD.Tensor, ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseAtan2Reverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 251
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the element-wise atan2 operation.
  example: []
  syntax:
    content: public Tensor[] ElementwiseAtan2Reverse(Tensor upstreamGradient, Tensor x)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: x
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The other tensor used in the atan2 operation.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The gradients with respect to the input tensors.
    content.vb: Public Function ElementwiseAtan2Reverse(upstreamGradient As Tensor, x As Tensor) As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the shapes of the tensors are not compatible.
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  id: ConcatReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ConcatReverse(Tensor, int)
  nameWithType: TensorReverse.ConcatReverse(Tensor, int)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse(ParallelReverseAutoDiff.PRAD.Tensor, int)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ConcatReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 295
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for concatenation.
  example: []
  syntax:
    content: public Tensor[] ConcatReverse(Tensor upstreamGradient, int axis)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: axis
      type: System.Int32
      description: The axis along which the concatenation was performed.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: An array of tensors representing the gradients for each input tensor.
    content.vb: Public Function ConcatReverse(upstreamGradient As Tensor, axis As Integer) As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse*
  nameWithType.vb: TensorReverse.ConcatReverse(Tensor, Integer)
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer)
  name.vb: ConcatReverse(Tensor, Integer)
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  id: CreateFlatArrayReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: CreateFlatArrayReverse(Tensor, int[])
  nameWithType: TensorReverse.CreateFlatArrayReverse(Tensor, int[])
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse(ParallelReverseAutoDiff.PRAD.Tensor, int[])
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: CreateFlatArrayReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 339
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for CreateFlatArray.
  example: []
  syntax:
    content: public Tensor[] CreateFlatArrayReverse(Tensor upstreamGradient, int[] indices)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: indices
      type: System.Int32[]
      description: The indices used in CreateFlatArray.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The gradient with respect to the input tensors.
    content.vb: Public Function CreateFlatArrayReverse(upstreamGradient As Tensor, indices As Integer()) As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse*
  nameWithType.vb: TensorReverse.CreateFlatArrayReverse(Tensor, Integer())
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer())
  name.vb: CreateFlatArrayReverse(Tensor, Integer())
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  id: StackReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: StackReverse(Tensor, int)
  nameWithType: TensorReverse.StackReverse(Tensor, int)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse(ParallelReverseAutoDiff.PRAD.Tensor, int)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: StackReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 377
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: The reverse stack operation.
  example: []
  syntax:
    content: public Tensor[] StackReverse(Tensor upstreamGradient, int axis = 0)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The upstream gradient.
    - id: axis
      type: System.Int32
      description: The axis.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The gradients.
    content.vb: Public Function StackReverse(upstreamGradient As Tensor, axis As Integer = 0) As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Empty input list.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Out of bounds axis.
  nameWithType.vb: TensorReverse.StackReverse(Tensor, Integer)
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer)
  name.vb: StackReverse(Tensor, Integer)
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  id: MeanReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: MeanReverse(Tensor, int)
  nameWithType: TensorReverse.MeanReverse(Tensor, int)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse(ParallelReverseAutoDiff.PRAD.Tensor, int)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: MeanReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 430
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the mean operation along the specified axis.
  example: []
  syntax:
    content: public Tensor MeanReverse(Tensor upstreamGradient, int axis)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: axis
      type: System.Int32
      description: The axis along which the mean was computed.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function MeanReverse(upstreamGradient As Tensor, axis As Integer) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse*
  nameWithType.vb: TensorReverse.MeanReverse(Tensor, Integer)
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer)
  name.vb: MeanReverse(Tensor, Integer)
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  id: ReciprocalReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ReciprocalReverse(Tensor, Tensor)
  nameWithType: TensorReverse.ReciprocalReverse(Tensor, Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse(ParallelReverseAutoDiff.PRAD.Tensor, ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ReciprocalReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 484
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the gradient for the reciprocal operation using MKL.NET.
  example: []
  syntax:
    content: public Tensor ReciprocalReverse(Tensor upstreamGradient, Tensor reciprocalResult)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing back from the subsequent operation.
    - id: reciprocalResult
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The result of the forward reciprocal operation.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The computed gradient.
    content.vb: Public Function ReciprocalReverse(upstreamGradient As Tensor, reciprocalResult As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  id: UnstackReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: UnstackReverse(Tensor[], int)
  nameWithType: TensorReverse.UnstackReverse(Tensor[], int)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse(ParallelReverseAutoDiff.PRAD.Tensor[], int)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: UnstackReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 508
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: The reverse unstack operation.
  example: []
  syntax:
    content: public Tensor UnstackReverse(Tensor[] upstreamGradients, int axis = 0)
    parameters:
    - id: upstreamGradients
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The upstream gradients from the unstacked tensors.
    - id: axis
      type: System.Int32
      description: The axis along which the tensor was unstacked.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor before unstacking.
    content.vb: Public Function UnstackReverse(upstreamGradients As Tensor(), axis As Integer = 0) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the axis is out of bounds or upstream gradients are empty.
  nameWithType.vb: TensorReverse.UnstackReverse(Tensor(), Integer)
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse(ParallelReverseAutoDiff.PRAD.Tensor(), Integer)
  name.vb: UnstackReverse(Tensor(), Integer)
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  id: GatherReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: GatherReverse(Tensor, Tensor, int)
  nameWithType: TensorReverse.GatherReverse(Tensor, Tensor, int)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse(ParallelReverseAutoDiff.PRAD.Tensor, ParallelReverseAutoDiff.PRAD.Tensor, int)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: GatherReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 600
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the Gather operation.
  example: []
  syntax:
    content: public Tensor GatherReverse(Tensor upstreamGradient, Tensor indices, int axis = 0)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: indices
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The indices of elements that were gathered.
    - id: axis
      type: System.Int32
      description: The axis along which slices were gathered.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function GatherReverse(upstreamGradient As Tensor, indices As Tensor, axis As Integer = 0) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse*
  nameWithType.vb: TensorReverse.GatherReverse(Tensor, Tensor, Integer)
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse(ParallelReverseAutoDiff.PRAD.Tensor, ParallelReverseAutoDiff.PRAD.Tensor, Integer)
  name.vb: GatherReverse(Tensor, Tensor, Integer)
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseSubReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseSubReverse(Tensor)
  nameWithType: TensorReverse.ElementwiseSubReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseSubReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 675
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for element-wise subtraction.
  example: []
  syntax:
    content: public Tensor[] ElementwiseSubReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The gradient with respect to the input tensors.
    content.vb: Public Function ElementwiseSubReverse(upstreamGradient As Tensor) As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  id: ElementwiseDivideReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ElementwiseDivideReverse(Tensor, Tensor)
  nameWithType: TensorReverse.ElementwiseDivideReverse(Tensor, Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse(ParallelReverseAutoDiff.PRAD.Tensor, ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ElementwiseDivideReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 706
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the element-wise division operation.
  example: []
  syntax:
    content: public Tensor[] ElementwiseDivideReverse(Tensor upstreamGradient, Tensor other)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: other
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The other tensor used in the division operation.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The gradients with respect to the input tensors.
    content.vb: Public Function ElementwiseDivideReverse(upstreamGradient As Tensor, other As Tensor) As Tensor()
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the shapes of the tensors are not compatible.
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  id: ExpandDimsReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ExpandDimsReverse(Tensor, int)
  nameWithType: TensorReverse.ExpandDimsReverse(Tensor, int)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse(ParallelReverseAutoDiff.PRAD.Tensor, int)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ExpandDimsReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 742
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the ExpandDims operation.
  example: []
  syntax:
    content: public Tensor ExpandDimsReverse(Tensor upstreamGradient, int axis = -1)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: axis
      type: System.Int32
      description: The axis.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function ExpandDimsReverse(upstreamGradient As Tensor, axis As Integer = -1) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse*
  nameWithType.vb: TensorReverse.ExpandDimsReverse(Tensor, Integer)
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer)
  name.vb: ExpandDimsReverse(Tensor, Integer)
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  id: TileReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: TileReverse(Tensor, int[])
  nameWithType: TensorReverse.TileReverse(Tensor, int[])
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse(ParallelReverseAutoDiff.PRAD.Tensor, int[])
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: TileReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 766
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the Tile operation.
  example: []
  syntax:
    content: public Tensor TileReverse(Tensor upstreamGradient, int[] multiples)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: multiples
      type: System.Int32[]
      description: The array of multiples for each dimension.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function TileReverse(upstreamGradient As Tensor, multiples As Integer()) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse*
  nameWithType.vb: TensorReverse.TileReverse(Tensor, Integer())
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer())
  name.vb: TileReverse(Tensor, Integer())
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  id: GatherNdReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: GatherNdReverse(Tensor, Tensor)
  nameWithType: TensorReverse.GatherNdReverse(Tensor, Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse(ParallelReverseAutoDiff.PRAD.Tensor, ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: GatherNdReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 818
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for GatherNd.
  example: []
  syntax:
    content: public Tensor GatherNdReverse(Tensor upstreamGradient, Tensor indices)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: indices
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The tensor containing the indices.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function GatherNdReverse(upstreamGradient As Tensor, indices As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse*
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  id: ReshapeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: ReshapeReverse(Tensor, int[])
  nameWithType: TensorReverse.ReshapeReverse(Tensor, int[])
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse(ParallelReverseAutoDiff.PRAD.Tensor, int[])
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: ReshapeReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 861
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the reshape operation.
  example: []
  syntax:
    content: public Tensor ReshapeReverse(Tensor upstreamGradient, int[] originalShape)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: originalShape
      type: System.Int32[]
      description: The original shape of the tensor before reshape.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor in its original shape.
    content.vb: Public Function ReshapeReverse(upstreamGradient As Tensor, originalShape As Integer()) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse*
  nameWithType.vb: TensorReverse.ReshapeReverse(Tensor, Integer())
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer())
  name.vb: ReshapeReverse(Tensor, Integer())
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[],System.Int32[],System.Int32[])
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[],System.Int32[],System.Int32[])
  id: SliceReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[],System.Int32[],System.Int32[])
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: SliceReverse(Tensor, int[], int[], int[]?)
  nameWithType: TensorReverse.SliceReverse(Tensor, int[], int[], int[]?)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse(ParallelReverseAutoDiff.PRAD.Tensor, int[], int[], int[]?)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: SliceReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 883
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the slice operation.
  example: []
  syntax:
    content: public Tensor SliceReverse(Tensor upstreamGradient, int[] begin, int[] size, int[]? strides = null)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: begin
      type: System.Int32[]
      description: The starting indices for each axis.
    - id: size
      type: System.Int32[]
      description: The lengths of the slice along each axis.
    - id: strides
      type: System.Int32[]
      description: The step size for each axis (default is 1).
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function SliceReverse(upstreamGradient As Tensor, begin As Integer(), size As Integer(), strides As Integer() = Nothing) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse*
  nameWithType.vb: TensorReverse.SliceReverse(Tensor, Integer(), Integer(), Integer())
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer(), Integer(), Integer())
  name.vb: SliceReverse(Tensor, Integer(), Integer(), Integer())
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  id: SplitReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: SplitReverse(Tensor[], int)
  nameWithType: TensorReverse.SplitReverse(Tensor[], int)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse(ParallelReverseAutoDiff.PRAD.Tensor[], int)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: SplitReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 927
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Reverses the split operation.
  example: []
  syntax:
    content: public Tensor SplitReverse(Tensor[] upstreamGradients, int axis = 0)
    parameters:
    - id: upstreamGradients
      type: ParallelReverseAutoDiff.PRAD.Tensor[]
      description: The gradients from the split tensors.
    - id: axis
      type: System.Int32
      description: The axis along which the tensor was split.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor before splitting.
    content.vb: Public Function SplitReverse(upstreamGradients As Tensor(), axis As Integer = 0) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the shapes of the upstream gradients are not compatible.
  nameWithType.vb: TensorReverse.SplitReverse(Tensor(), Integer)
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse(ParallelReverseAutoDiff.PRAD.Tensor(), Integer)
  name.vb: SplitReverse(Tensor(), Integer)
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  id: SumRowsReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: SumRowsReverse(Tensor)
  nameWithType: TensorReverse.SumRowsReverse(Tensor)
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: SumRowsReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 1003
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: The reverse of the sum rows operation.
  example: []
  syntax:
    content: public Tensor SumRowsReverse(Tensor upstreamGradient)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The upstream gradient.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The resultant tensor.
    content.vb: Public Function SumRowsReverse(upstreamGradient As Tensor) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Shape does not match.
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  id: TransposeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: TransposeReverse(Tensor, int[])
  nameWithType: TensorReverse.TransposeReverse(Tensor, int[])
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse(ParallelReverseAutoDiff.PRAD.Tensor, int[])
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: TransposeReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 1034
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the transpose operation.
  example: []
  syntax:
    content: public Tensor TransposeReverse(Tensor upstreamGradient, int[] permutation)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: permutation
      type: System.Int32[]
      description: The permutation of the axes used in the forward transpose operation.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor before transposition.
    content.vb: Public Function TransposeReverse(upstreamGradient As Tensor, permutation As Integer()) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse*
  nameWithType.vb: TensorReverse.TransposeReverse(Tensor, Integer())
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse(ParallelReverseAutoDiff.PRAD.Tensor, Integer())
  name.vb: TransposeReverse(Tensor, Integer())
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.String[])
  commentId: M:ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.String[])
  id: IndexerReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.String[])
  parent: ParallelReverseAutoDiff.PRAD.TensorReverse
  langs:
  - csharp
  - vb
  name: IndexerReverse(Tensor, params string[])
  nameWithType: TensorReverse.IndexerReverse(Tensor, params string[])
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse(ParallelReverseAutoDiff.PRAD.Tensor, params string[])
  type: Method
  source:
    remote:
      path: src/PRAD/TensorReverse.cs
      branch: main
      repo: https://github.com/ameritusweb/ParallelReverseAutoDiff.git
    id: IndexerReverse
    path: ../../src/PRAD/TensorReverse.cs
    startLine: 1086
  assemblies:
  - ParallelReverseAutoDiff
  namespace: ParallelReverseAutoDiff.PRAD
  summary: Computes the reverse gradient for the Indexer operation.
  example: []
  syntax:
    content: public Tensor IndexerReverse(Tensor upstreamGradient, params string[] indices)
    parameters:
    - id: upstreamGradient
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient flowing from the upstream layer.
    - id: indices
      type: System.String[]
      description: The indices used to slice.
    return:
      type: ParallelReverseAutoDiff.PRAD.Tensor
      description: The gradient with respect to the input tensor.
    content.vb: Public Function IndexerReverse(upstreamGradient As Tensor, ParamArray indices As String()) As Tensor
  overload: ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse*
  nameWithType.vb: TensorReverse.IndexerReverse(Tensor, ParamArray String())
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse(ParallelReverseAutoDiff.PRAD.Tensor, ParamArray String())
  name.vb: IndexerReverse(Tensor, ParamArray String())
references:
- uid: ParallelReverseAutoDiff.PRAD
  commentId: N:ParallelReverseAutoDiff.PRAD
  href: ParallelReverseAutoDiff.html
  name: ParallelReverseAutoDiff.PRAD
  nameWithType: ParallelReverseAutoDiff.PRAD
  fullName: ParallelReverseAutoDiff.PRAD
  spec.csharp:
  - uid: ParallelReverseAutoDiff
    name: ParallelReverseAutoDiff
    href: ParallelReverseAutoDiff.html
  - name: .
  - uid: ParallelReverseAutoDiff.PRAD
    name: PRAD
    href: ParallelReverseAutoDiff.PRAD.html
  spec.vb:
  - uid: ParallelReverseAutoDiff
    name: ParallelReverseAutoDiff
    href: ParallelReverseAutoDiff.html
  - name: .
  - uid: ParallelReverseAutoDiff.PRAD
    name: PRAD
    href: ParallelReverseAutoDiff.PRAD.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse
  commentId: T:ParallelReverseAutoDiff.PRAD.TensorReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html
  name: TensorReverse
  nameWithType: TensorReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.#ctor*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.#ctor
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.#ctor(ParallelReverseAutoDiff.PRAD.Tensor[])
  name: TensorReverse
  nameWithType: TensorReverse.TensorReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.TensorReverse
  nameWithType.vb: TensorReverse.New
  fullName.vb: ParallelReverseAutoDiff.PRAD.TensorReverse.New
  name.vb: New
- uid: ParallelReverseAutoDiff.PRAD.Tensor[]
  isExternal: true
  href: ParallelReverseAutoDiff.PRAD.Tensor.html
  name: Tensor[]
  nameWithType: Tensor[]
  fullName: ParallelReverseAutoDiff.PRAD.Tensor[]
  nameWithType.vb: Tensor()
  fullName.vb: ParallelReverseAutoDiff.PRAD.Tensor()
  name.vb: Tensor()
  spec.csharp:
  - uid: ParallelReverseAutoDiff.PRAD.Tensor
    name: Tensor
    href: ParallelReverseAutoDiff.PRAD.Tensor.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: ParallelReverseAutoDiff.PRAD.Tensor
    name: Tensor
    href: ParallelReverseAutoDiff.PRAD.Tensor.html
  - name: (
  - name: )
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors
  name: InitialTensors
  nameWithType: TensorReverse.InitialTensors
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.InitialTensors
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseAddReverse
  nameWithType: TensorReverse.ElementwiseAddReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAddReverse
- uid: ParallelReverseAutoDiff.PRAD.Tensor
  commentId: T:ParallelReverseAutoDiff.PRAD.Tensor
  parent: ParallelReverseAutoDiff.PRAD
  href: ParallelReverseAutoDiff.PRAD.Tensor.html
  name: Tensor
  nameWithType: Tensor
  fullName: ParallelReverseAutoDiff.PRAD.Tensor
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: LogReverse
  nameWithType: TensorReverse.LogReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.LogReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: LnReverse
  nameWithType: TensorReverse.LnReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.LnReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: ExpReverse
  nameWithType: TensorReverse.ExpReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseMultiplyReverse
  nameWithType: TensorReverse.ElementwiseMultiplyReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseMultiplyReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseSquareReverse
  nameWithType: TensorReverse.ElementwiseSquareReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseSquareRootReverse
  nameWithType: TensorReverse.ElementwiseSquareRootReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSquareRootReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseSinReverse
  nameWithType: TensorReverse.ElementwiseSinReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSinReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseCosReverse
  nameWithType: TensorReverse.ElementwiseCosReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseCosReverse
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseAtan2Reverse
  nameWithType: TensorReverse.ElementwiseAtan2Reverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseAtan2Reverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  name: ConcatReverse
  nameWithType: TensorReverse.ConcatReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ConcatReverse
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  name: CreateFlatArrayReverse
  nameWithType: TensorReverse.CreateFlatArrayReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.CreateFlatArrayReverse
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  name: StackReverse
  nameWithType: TensorReverse.StackReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.StackReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  name: MeanReverse
  nameWithType: TensorReverse.MeanReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.MeanReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  name: ReciprocalReverse
  nameWithType: TensorReverse.ReciprocalReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ReciprocalReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  name: UnstackReverse
  nameWithType: TensorReverse.UnstackReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.UnstackReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  name: GatherReverse
  nameWithType: TensorReverse.GatherReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseSubReverse
  nameWithType: TensorReverse.ElementwiseSubReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseSubReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  name: ElementwiseDivideReverse
  nameWithType: TensorReverse.ElementwiseDivideReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ElementwiseDivideReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32)
  name: ExpandDimsReverse
  nameWithType: TensorReverse.ExpandDimsReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ExpandDimsReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  name: TileReverse
  nameWithType: TensorReverse.TileReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.TileReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse(ParallelReverseAutoDiff.PRAD.Tensor,ParallelReverseAutoDiff.PRAD.Tensor)
  name: GatherNdReverse
  nameWithType: TensorReverse.GatherNdReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.GatherNdReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  name: ReshapeReverse
  nameWithType: TensorReverse.ReshapeReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.ReshapeReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[],System.Int32[],System.Int32[])
  name: SliceReverse
  nameWithType: TensorReverse.SliceReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.SliceReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse(ParallelReverseAutoDiff.PRAD.Tensor[],System.Int32)
  name: SplitReverse
  nameWithType: TensorReverse.SplitReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.SplitReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse(ParallelReverseAutoDiff.PRAD.Tensor)
  name: SumRowsReverse
  nameWithType: TensorReverse.SumRowsReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.SumRowsReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.Int32[])
  name: TransposeReverse
  nameWithType: TensorReverse.TransposeReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.TransposeReverse
- uid: ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse*
  commentId: Overload:ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse
  href: ParallelReverseAutoDiff.PRAD.TensorReverse.html#ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse(ParallelReverseAutoDiff.PRAD.Tensor,System.String[])
  name: IndexerReverse
  nameWithType: TensorReverse.IndexerReverse
  fullName: ParallelReverseAutoDiff.PRAD.TensorReverse.IndexerReverse
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
